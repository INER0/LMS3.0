# Generated by Django 5.2.5 on 2025-08-08 15:21

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'authors',
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('isbn', models.CharField(max_length=13, unique=True, validators=[django.core.validators.RegexValidator(message='ISBN must be 10 or 13 digits', regex='^\\d{10}$|^\\d{13}$')])),
                ('title', models.CharField(max_length=500)),
                ('category', models.CharField(choices=[('fiction', 'Fiction'), ('non-fiction', 'Non-Fiction'), ('research', 'Research'), ('children', "Children's Books"), ('academic', 'Academic'), ('reference', 'Reference')], max_length=50)),
                ('edition', models.CharField(max_length=100)),
                ('publication_year', models.IntegerField()),
                ('language', models.CharField(choices=[('dhivehi', 'Dhivehi'), ('english', 'English'), ('arabic', 'Arabic'), ('other', 'Other')], max_length=50)),
            ],
            options={
                'db_table': 'books',
            },
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('location', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Branches',
                'db_table': 'branches',
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('address', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'publishers',
            },
        ),
        migrations.CreateModel(
            name='SystemSetting',
            fields=[
                ('key', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('value', models.TextField()),
            ],
            options={
                'db_table': 'system_settings',
            },
        ),
        migrations.CreateModel(
            name='BookAuthor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.author')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.book')),
            ],
            options={
                'db_table': 'book_authors',
                'unique_together': {('book', 'author')},
            },
        ),
        migrations.AddField(
            model_name='book',
            name='authors',
            field=models.ManyToManyField(through='library.BookAuthor', to='library.author'),
        ),
        migrations.CreateModel(
            name='BookCopy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('barcode', models.CharField(max_length=255, unique=True)),
                ('purchase_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('condition', models.CharField(choices=[('good', 'Good'), ('damaged', 'Damaged'), ('lost', 'Lost')], default='good', max_length=20)),
                ('last_seen', models.DateField(default=django.utils.timezone.now)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.book')),
            ],
            options={
                'verbose_name_plural': 'Book Copies',
                'db_table': 'book_copies',
            },
        ),
        migrations.CreateModel(
            name='BookCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.CharField(choices=[('good', 'Good'), ('damaged', 'Damaged'), ('lost', 'Lost')], max_length=20)),
                ('notes', models.TextField()),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('book_copy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.bookcopy')),
            ],
            options={
                'db_table': 'book_conditions',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='BookBorrowHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('borrow_date', models.DateField()),
                ('return_date', models.DateField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('book_copy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.bookcopy')),
            ],
            options={
                'verbose_name_plural': 'Book Borrow History',
                'db_table': 'book_borrow_history',
                'ordering': ['-borrow_date'],
            },
        ),
        migrations.AddField(
            model_name='book',
            name='publisher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='library.publisher'),
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.branch')),
            ],
            options={
                'db_table': 'sections',
            },
        ),
        migrations.AddField(
            model_name='book',
            name='section',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='library.section'),
        ),
        migrations.CreateModel(
            name='UserNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('due_soon', 'Due Soon'), ('overdue', 'Overdue'), ('reservation_ready', 'Reservation Ready'), ('fine_notice', 'Fine Notice'), ('membership_expiry', 'Membership Expiry'), ('system_notice', 'System Notice')], max_length=30)),
                ('message', models.TextField()),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('read', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_notifications',
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='BranchManager',
            fields=[
                ('branch', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='library.branch')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'branch_managers',
            },
        ),
    ]
